package ch.epfl.bbp.uima.topicmodels.writers.exploitation
import java.io.File
import scala.sys.process.stringToProcess
import org.apache.uima.analysis_component.JCasAnnotator_ImplBase
import org.apache.uima.jcas.JCas
import org.apache.uima.UimaContext
import org.apache.uima.fit.util.JCasUtil
import ch.epfl.bbp.uima.topicmodels.annotators.AnnotatorUtils
import ch.epfl.bbp.uima.types.TopicDistribution
import scala.collection.JavaConversions._
import ch.epfl.bbp.uima.BlueCasUtil
import java.io.PrintStream
import java.io.FileOutputStream
import org.apache.commons.io.FileUtils
import com.google.common.io.Files

/**
 * Plots for each CAS annotated with its overall topic distribution its estimated distribution.
 *
 * Calls external script to do plots from a temporary file generated for each CAS.
 */
//@TypeCapability(inputs = Array(ch.epfl.bbp.uima.types.TopicDistribution), outputs = Array())
class TopicDistributionWriter extends JCasAnnotator_ImplBase {

  private var dir: File = null
  private var command = ""
  private var cnt = 0

  override def initialize(context: UimaContext) = {
    val dirPath = AnnotatorUtils.getStringParamFromContext(context, TopicDistributionWriter.OutputDir, "", true)
    dir = new File(dirPath)
    if (!dir.exists())
      dir.mkdirs()

    command = AnnotatorUtils.getStringParamFromContext(context, TopicDistributionWriter.Command, "", true)
  }

  override def process(doc: JCas) {
    val id = BlueCasUtil.getHeaderDocId(doc)

    val filename = if (id == null || id.length() == 0) cnt.toString else id

    val td = JCasUtil.select(doc, classOf[TopicDistribution])
    if (!td.isEmpty()) {
      val dist = new File(dir, filename + ".dist")

      val out = new PrintStream(new FileOutputStream(dist))
      td.first
        .getProbability
        .toArray
        .foreach(out.println(_))
      out.close

      val exec = command.replaceAllLiterally("{input}", dist.getAbsolutePath)
        .replaceAllLiterally("{output}", dir.getAbsolutePath() + "/" + filename)
      println("command is " + exec)
      exec.!
    }
    cnt += 1
  }

}

object TopicDistributionWriter {
  val OutputDir = "outputDir" // (String) output directory of plots
  /*
   * (String) The command to be executed (resembling a command you would execute in a bash terminal
   * (see http://www.scala-lang.org/api/current/index.html#scala.sys.process.ProcessBuilder)
   * The command is expected to have place holders {input} and {output} where this annotator will replace {input} by
   * the absolute path of the temporary file generated (topic distribution is written one vector entry per line) and {output}
   * the filename of the output file.
   */
  val Command = "command"
}