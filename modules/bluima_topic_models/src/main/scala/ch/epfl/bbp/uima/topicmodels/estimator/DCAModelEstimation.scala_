
package ch.epfl.bbp.uima.topicmodels.estimator

import java.io.File
import scala.collection.JavaConversions._
import scala.io.Source
import scopt.immutable.OptionParser
import scala.collection.immutable.HashMap
import ch.epfl.bbp.uima.topicmodels.dca.DCAFiles

/**
 * Estimation program for LDA models generated by DCA
 */
object DCAModelEstimation extends LikelihoodEstimation[DCAConfig] {
  def main(args: Array[String]) {
    this.estimate(args, DCAConfig())
  }

  override def getAlpha(c: DCAConfig) = {
    DCAFiles.getAlpha(c.rootDir, c.stem)
  }

  override def getBeta(c: DCAConfig) = {
    DCAFiles.getThetaPrior(c.rootDir, c.stem)
  }

  override def getTermTopicMatrix(c: DCAConfig): Array[Array[Int]] = {
    val corpusSize = if (c.trainingCorpusSize <= 0) DCAFiles.estimateTrainingCorpusSize(c.rootDir, c.stem)
    				 else c.trainingCorpusSize

    DCAFiles.getTermTopicCountsMatrix(c.rootDir, c.stem, corpusSize, c.averaged)
  }

  override def getTokenDict(c: DCAConfig): Map[String, Int] = {
    DCAFiles.getTokenDict(c.rootDir, c.stem)
  }

  override def argumentParser() = {
    new OptionParser[DCAConfig]("DCALikelihoodEstimation") {
      def options = Seq(
        arg("<directory>", "DCA root directory") { (v: String, c: DCAConfig) => c.copy(rootDir = v) },
        arg("stem", "Stem") { (v: String, c: DCAConfig) => c.copy(stem = v) },
        arg("<file>", "Documents to test (one line per instance)") { (v: String, c: DCAConfig) => c.copy(tests = v) },
        intOpt("c", "cycles", "Number of estimation cycles") { (v: Int, c: DCAConfig) => c.copy(cycles = v) },
        intOpt("t", "training-size", "Number of tokens in training corpus") { (v: Int, c: DCAConfig) => c.copy(trainingCorpusSize = v) },
        booleanOpt("a", "averaged", "Use averaged theta matrix (.meantheta) if available") { (v: Boolean, c: DCAConfig) => c.copy(averaged = v) })
    }
  }
}