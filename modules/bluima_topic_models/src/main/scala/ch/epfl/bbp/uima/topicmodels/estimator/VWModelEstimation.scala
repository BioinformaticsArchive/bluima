package ch.epfl.bbp.uima.topicmodels.estimator
import scopt.immutable.OptionParser
import ch.epfl.bbp.uima.topicmodels.mallet.MalletUtils

/**
 * Estimation program for LDA models generated by Vowpal Wabbit 
 */
object VWModelEstimation extends LikelihoodEstimation[VowpalWabbitConfig] {
  def main(args: Array[String])  {
    estimate(args, VowpalWabbitConfig())
  }

  override def getAlpha(c: VowpalWabbitConfig) = Array.fill[Double](topics(c))(c.alpha)
  override def getBeta(c: VowpalWabbitConfig) = c.beta

  override def getTermTopicMatrix(c: VowpalWabbitConfig): Array[Array[Int]] = {
    val src = prepareFile(c.modelFile)
    
    // remove header in "readable model"
    val lines = src.getLines()
    				.drop(1)
    				.dropWhile(l => l.contains(":"))
    
    // read actual matrix
    val m = lines
      	.map(l => l.split(' ').map(_.toDouble))
        .toArray
   
    MalletUtils.convertProbabilityMatrixToCountsMatrix(m, c.trainingCorpusSize)
  }

  override def argumentParser() = {
    new OptionParser[VowpalWabbitConfig]("VowpalWabbitLikelihoodEstimation") {
      def options = Seq(
        doubleOpt("a", "alpha", "alpha value") { (v: Double, c: VowpalWabbitConfig) => c.copy(alpha = v) },
        doubleOpt("b", "beta", "beta value") { (v: Double, c: VowpalWabbitConfig) => c.copy(beta = v) },
        intOpt("c", "cycles", "Number of estimation cycles") { (v: Int, c: VowpalWabbitConfig) => c.copy(cycles = v) },
                intOpt("t", "training-size", "Number of tokens in training corpus")  { (v: Int, c: VowpalWabbitConfig) => c.copy(trainingCorpusSize = v) },
        arg("<model_file>", "VowpalWabbit model file (generated with the VW option \'--readable_model\'") { (v: String, c: VowpalWabbitConfig) => c.copy(modelFile = v) },
        arg("<test docs>", "Documents to test (one line per instance)") { (v: String, c: VowpalWabbitConfig) => c.copy(tests = v) },
        arg("<token file>", "Token dictionary file: one line per token") { (v: String, c: VowpalWabbitConfig) => c.copy(tokenFile = v) })
    }
  }

  /**
   * Returns the number of topics used in the model
   */
  private def topics(c: VowpalWabbitConfig): Int = {
    prepareFile(c.modelFile).getLines()
    				.drop(1)
    				.dropWhile(l => l.contains(":")).next.split(' ').length // reads first line of the matrix
  }
  
}