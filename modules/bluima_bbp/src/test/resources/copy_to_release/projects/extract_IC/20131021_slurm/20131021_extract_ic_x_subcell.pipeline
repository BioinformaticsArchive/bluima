########################################################################################
#
# extract IonChannels x {cell, subcell, br}
# using simple co-occurrence
#
# $1 base output,
#   e.g. target, or /nfs4/bbp.epfl.ch/simulation/nlp/data/20131024_ic-X-subcell/
# $2 %(job_name)s job id (for input and output files)
#   e.g. 1 or 34
# for abstracts:
# $3 %(from_id)s
# $4 %(to_id)s
#
########################################################################################

#cr: ch.epfl.bbp.uima.pdf.cr.PdfCollectionReader
# inputDirectory: /Volumes/HDD2/ren_data/data_hdd/ontologies/BAMS/pdfs/crawled_bams_pdfs
## inputDirectory: /Volumes/HDD2/ren_data/data_hdd/ontologies/BAMS/pdfs/manually_crawled_bams_pdfs

#cr: PubmedDatabaseCR
# between__java: new int[]{ $3 , $4 }
#db_connection__java: new String[]{ "127.0.0.1", "bb_pubmed", "root", "" }

# an abstract from Severine, for TEST
cr: PubmedFromListDatabaseCR
 ids__java: new int[]{ 19118165 }
 db_connection__java: new String[]{ "127.0.0.1", "bb_pubmed", "root", "" }

# GOOD TO TEST
#cr: OneDocPerLineReader
# inputFile: $ROOT/modules/bluima/src/test/resources/copy_to_release/projects/extract_IC/20131021_slurm/extract_ic.test.txt


#cr: FromFilelistReader
# inputFile: /nfs4/bbp.epfl.ch/user/richarde/dev/bluebrain/release_20131003/pipelines/projects/extract_IC/20130930_slurm/inputFiles/$2.txt
# format__java: true
# pathPrefix: /nfs4/bbp.epfl.ch/scratch/richarde/pdfs/

#ae: ch.epfl.bbp.uima.pdf.cr.PdfCollectionAnnotator


# PREPROC ##############################################################################

ae_java: ch.epfl.bbp.uima.ae.OpenNlpHelper.getSentenceSplitter();

ae_java: ch.epfl.bbp.uima.ae.OpenNlpHelper.getTokenizer();

ae_java: ch.epfl.bbp.uima.ae.OpenNlpHelper.getPosTagger();

ae: BlueBioLemmatizer

# NERS ###################################################################################

#NAV
ae_java: ch.epfl.bbp.uima.LexicaHelper.getConceptMapper("/blueonto1/navchannel")

ae: KeepLargestAnnotationAnnotator
 annotationClass: ch.epfl.bbp.uima.types.NavchannelDictTerm


#SUBCELL
ae_java: ch.epfl.bbp.uima.LexicaHelper.getConceptMapper("/go/subcell")

ae: KeepLargestAnnotationAnnotator
 annotationClass: ch.epfl.bbp.uima.types.SubcellDictTerm


#NEURON
ae_java: ch.epfl.bbp.uima.LexicaHelper.getConceptMapper("/blueonto1/neuron")

ae: KeepLargestAnnotationAnnotator
 annotationClass: ch.epfl.bbp.uima.types.NeuronDictTerm


#BR
ae: BrainRegionAnnotator
 modelFile: $ROOT/modules/bluima_regions/resources/models/20130515_BrainRegion.model

ae: KeepLargestAnnotationAnnotator
 annotationClass: ch.epfl.bbp.uima.types.BrainRegion


# detects and expands abbreviations TODO loops endlessly somehow
#ae: AbbreviationsAnnotator
#ae: AbbreviationsExpanderAnnotator

########################################################################################
#TODO
#AGE ae_java: ch.epfl.bbp.uima.LexicaHelper.getConceptMapper("/blueonto1/age")
#SPECIE


# COOCCURENCES ###########################################################################

# 1: NavchannelDictTerm
# 2: SubcellDictTerm
# 3: NeuronDictTerm
# 4: BrainRegion


# NAV x SUBCELL
ae: ch.epfl.bbp.uima.ae.relations.ExtractCoocurrences
 enclosingScope: de.julielab.jules.types.Sentence
 annot1: ch.epfl.bbp.uima.types.NavchannelDictTerm
 annot2: ch.epfl.bbp.uima.types.SubcellDictTerm

ae: ch.epfl.bbp.uima.ae.relations.WriteCoocurrencesToLoadfile2
 outputFile: $1/$2_subcell_cooc.txt
 annot1Type: 1
 annot2Type: 2

ae: RemoveAnnotationsAnnotator
 annotationClass: ch.epfl.bbp.uima.types.Cooccurrence


# NAV x NEURON
ae: ch.epfl.bbp.uima.ae.relations.ExtractCoocurrences
 enclosingScope: de.julielab.jules.types.Sentence
 annot1: ch.epfl.bbp.uima.types.NavchannelDictTerm
 annot2: ch.epfl.bbp.uima.types.NeuronDictTerm

ae: ch.epfl.bbp.uima.ae.relations.WriteCoocurrencesToLoadfile2
 outputFile: $1/$2_neuron_cooc.txt
 annot1Type: 1
 annot2Type: 3

ae: RemoveAnnotationsAnnotator
 annotationClass: ch.epfl.bbp.uima.types.Cooccurrence


# NAV x BR
ae: ch.epfl.bbp.uima.ae.relations.ExtractCoocurrences
 enclosingScope: de.julielab.jules.types.Sentence
 annot1: ch.epfl.bbp.uima.types.NavchannelDictTerm
 annot2: ch.epfl.bbp.uima.types.BrainRegion
 annot2IdField: coveredText

ae: ch.epfl.bbp.uima.ae.relations.WriteCoocurrencesToLoadfile2
 outputFile: $1/$2_br_cooc.txt
 annot1Type: 1
 annot2Type: 4


########################################################################################
ae: StatsAnnotatorPlus
 printEvery__java: 1000

ae: CountAnnotations
 annotationClasses__java: new String[]{ "ch.epfl.bbp.uima.types.NavchannelDictTerm", "ch.epfl.bbp.uima.types.SubcellDictTerm", "ch.epfl.bbp.uima.types.NeuronDictTerm", "ch.epfl.bbp.uima.types.BrainRegion" }
 outputFile: $1/$2_counts.txt


