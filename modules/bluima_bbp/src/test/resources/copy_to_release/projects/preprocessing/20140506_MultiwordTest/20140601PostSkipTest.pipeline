# Reading: 
cr: ch.epfl.bbp.uima.cr.OneDocPerLineReader2
 inputFile: /home/michael/Documents/MasterProject/lda_mesh/BluimaTest3/test

# Preprocessing:
ae_java: ch.epfl.bbp.uima.ae.OpenNlpHelper.getSentenceSplitter();
ae_java: ch.epfl.bbp.uima.ae.OpenNlpHelper.getTokenizer();
ae_java: ch.epfl.bbp.uima.ae.OpenNlpHelper.getPosTagger();
ae: BlueBioLemmatizer

#Annotation retrieval:
ae_java: ch.epfl.bbp.uima.ae.MeasureRegexAnnotators.getAllAED()
ae: ch.epfl.bbp.uima.ae.PruneMeasuresAnnotator
ae: ch.epfl.bbp.uima.ae.PunctuationAnnotator
ae: ch.epfl.bbp.uima.ae.SkipSomePosAnnotator

#NERs
ae_java: ch.epfl.bbp.uima.LexicaHelper.getConceptMapper("/onto_baseline/disease")
ae_java: ch.epfl.bbp.uima.LexicaHelper.getConceptMapper("/onto_baseline/protein")

#Choose annotations to keep (longest match rule)
ae: ch.epfl.bbp.uima.ae.ViterbiFilterAnnotator

#Normalization
ae: ch.epfl.bbp.uima.ae.BioLemmatizerNormalizerAnnotator
ae: ch.epfl.bbp.uima.filter.MeasureNormalizerAnnotator
 removeSimpleMeasure__java: true
ae: ch.epfl.bbp.uima.ae.EntityNormalizerAnnotator

#Annotation filtering 
#ae: ch.epfl.bbp.uima.filter.PunctuationFilterAnnotator
#ae: ch.epfl.bbp.uima.filter.StopwordFilterAnnotator
ae: ch.epfl.bbp.uima.filter.AnnotationFilterAnnotator
 annotationClasses__java: new String[]{"ch.epfl.bbp.uima.types.POSSkip"}
 

#Frecuency counts
ae: ch.epfl.bbp.uima.filter.FrequencyFilterWriter
 outputFile: /home/michael/Documents/MasterProject/lda_mesh/BluimaTest2/frequency
	
#Writing
ae: ch.epfl.bbp.uima.ae.output.LdaCWriter 
 dcaFormat__java: true
 outputFile: /home/michael/Documents/MasterProject/lda_mesh/BluimaTest/output
 vocabularyOutputFile: /home/michael/Documents/MasterProject/lda_mesh/BluimaTest2/vocab

# Only recommended for testing.
ae: ch.epfl.bbp.uima.ae.output.BartWriter
 debug__java: true
 outputDir: /home/michael/Documents/MasterProject/lda_mesh/BluimaTest3/bart

ae: ch.epfl.bbp.uima.filter.KeepsDumper
 printCoveredText__java: true