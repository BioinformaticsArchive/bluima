#
# 20130310 exploit with NS model
# $1 dca model path
# $2 pmids, comma separated
# $3 outputdir

cr: PubmedFromListDatabaseCR
 db_connection__java: new String[]{ "localhost", "bb_pubmed", "root", "" } 
 ids__java: new int[]{ $2 }

include: ../../includes/preprocess.incl

# lexicon-based from MT
ae_java: ch.epfl.bbp.uima.LexicaHelper.getConceptMapper("blueonto1/age")

ae_java: ch.epfl.bbp.uima.LexicaHelper.getConceptMapper("blueonto1/disease")

ae_java: ch.epfl.bbp.uima.LexicaHelper.getConceptMapper("blueonto1/ionchannel")

ae_java: ch.epfl.bbp.uima.LexicaHelper.getConceptMapper("blueonto1/method")

ae_java: ch.epfl.bbp.uima.LexicaHelper.getConceptMapper("blueonto1/molecule")

ae_java: ch.epfl.bbp.uima.LexicaHelper.getConceptMapper("blueonto1/organism")

ae_java: ch.epfl.bbp.uima.LexicaHelper.getConceptMapper("blueonto1/region")

ae_java: ch.epfl.bbp.uima.LexicaHelper.getConceptMapper("blueonto1/sex")

# lexicon-based from Biolexicon, OBO & co
#ae_java: ch.epfl.bbp.uima.LexicaHelper.getConceptMapper("/biolexicon/biolexicon_senses")

ae_java: ch.epfl.bbp.uima.LexicaHelper.getConceptMapper("/brainregions/neuronames")

ae_java: ch.epfl.bbp.uima.LexicaHelper.getConceptMapper("/onto_baseline/cell")

ae_java: ch.epfl.bbp.uima.LexicaHelper.getConceptMapper("/onto_baseline/disease")

ae_java: ch.epfl.bbp.uima.LexicaHelper.getConceptMapper("/onto_baseline/protein")

ae_java: ch.epfl.bbp.uima.LexicaHelper.getConceptMapper("/onto_baseline/verb")


ae: PunctuationAnnotator

ae: WordnetAnnotator

ae: GeneralEnglishAnnotator

ae_java: ch.epfl.bbp.uima.ae.MeasureRegexAnnotators.getAllAED()

ae: PruneMeasuresAnnotator


ae: SkipSomePosAnnotator

ae: ViterbiFilterAnnotator


# DCA #######################################


#    val blackList: Array[String] = Array("%", ")", "(", ".", ",", ";", "!", "?", "\"", "_", ">",
#      "<", "#", "^", ":", "/", "\\", "=", "-", "+", "*", "$", "@", "`", "[", "]", "&", "{", "}", "|") ++
#      (0 to 9).map(_.toString) // get also rid of numbers, normally another annotator would do this (MeasureRegexAnnotator doesn't work on these data)
#    val illegalChars = AnalysisEngineFactory.createPrimitiveDescription(classOf[IllegalCharacterSequenceAnnotator], ts,
#      IllegalCharacterSequenceAnnotator.CharacterBlackList, blackList,
#      IllegalCharacterSequenceAnnotator.IncludeWhiteSpace, "true")


ae: FeatureTokensFilterAnnotator2
 caseSensitive: false
 tokenFrequencyFile: /Volumes/HDD2/ren_data/dev_hdd/bluebrain/9_lda/dca/20130129_replicate_marcs/20130127_dca-pubmed_abstracts_preproc/pubmed_preproc_done/token_frequency
 #tokenFrequencyFile: /nfs4/bbp.epfl.ch/simulation/nlp/data/lda/20130214_preprocess_pubmed3.pipeline/token_frequency
 minimumFrequency: 100
 maximumFrequency__java: Integer.MAX_VALUE
 stopwordsFilePath: $ROOT/modules/bluima_topic_models/src/main/resources/stoplists/mallet_stopwords_en.txt

ae: FeatureTokensExtractionAnnotator2

ae: ch.epfl.bbp.uima.topicmodels.annotators.DCATopicModelsAnnotator
 dcaDirectoryPath: $1
 dcaStem: dca
 inferenceIterations: 100
 inferenceBurnin: 20

ae: ch.epfl.bbp.uima.topicmodels.writers.exploitation.AnnotateTokensWithTopicWriter
 outputDir: $3
 latexOutput: true
 
ae: ch.epfl.bbp.uima.topicmodels.writers.exploitation.TopicDistributionWriter
 outputDir: $3
 command: R --vanilla --slave -f $ROOTmodules/bluima_topic_models/scripts/plot_doc_topic_distribution.R --args {input} {output}

 
ae: StatsAnnotatorPlus
 printEvery__java: 1000